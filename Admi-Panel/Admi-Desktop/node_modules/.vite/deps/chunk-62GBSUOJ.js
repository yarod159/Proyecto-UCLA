import {
  require_react_dom
} from "./chunk-ZW7WJ6XU.js";
import {
  HTMLElementType,
  exactProp,
  init_utils,
  setRef,
  useEnhancedEffect_default,
  useForkRef
} from "./chunk-XGTUT6PN.js";
import {
  require_prop_types
} from "./chunk-VUKM3GFY.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __esm,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@mui/base/Portal/Portal.js
function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
var React, ReactDOM, import_prop_types, import_jsx_runtime, Portal;
var init_Portal = __esm({
  "node_modules/@mui/base/Portal/Portal.js"() {
    "use client";
    React = __toESM(require_react());
    ReactDOM = __toESM(require_react_dom());
    import_prop_types = __toESM(require_prop_types());
    init_utils();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    Portal = React.forwardRef(function Portal2(props, forwardedRef) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = React.useState(null);
      const handleRef = useForkRef(React.isValidElement(children) ? children.ref : null, forwardedRef);
      useEnhancedEffect_default(() => {
        if (!disablePortal) {
          setMountNode(getContainer(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect_default(() => {
        if (mountNode && !disablePortal) {
          setRef(forwardedRef, mountNode);
          return () => {
            setRef(forwardedRef, null);
          };
        }
        return void 0;
      }, [forwardedRef, mountNode, disablePortal]);
      if (disablePortal) {
        if (React.isValidElement(children)) {
          const newProps = {
            ref: handleRef
          };
          return React.cloneElement(children, newProps);
        }
        return (0, import_jsx_runtime.jsx)(React.Fragment, {
          children
        });
      }
      return (0, import_jsx_runtime.jsx)(React.Fragment, {
        children: mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode
      });
    });
    true ? Portal.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The children to render into the `container`.
       */
      children: import_prop_types.default.node,
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: import_prop_types.default.oneOfType([HTMLElementType, import_prop_types.default.func]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: import_prop_types.default.bool
    } : void 0;
    if (true) {
      Portal["propTypes"] = exactProp(Portal.propTypes);
    }
  }
});

// node_modules/@mui/base/Portal/Portal.types.js
var init_Portal_types = __esm({
  "node_modules/@mui/base/Portal/Portal.types.js"() {
  }
});

// node_modules/@mui/base/Portal/index.js
var init_Portal2 = __esm({
  "node_modules/@mui/base/Portal/index.js"() {
    "use client";
    init_Portal();
    init_Portal_types();
  }
});

export {
  Portal,
  init_Portal2 as init_Portal
};
//# sourceMappingURL=chunk-62GBSUOJ.js.map
